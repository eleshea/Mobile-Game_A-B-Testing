# -*- coding: utf-8 -*-
"""Mobile Game AB Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MKC6fDMZ6UIgiD5WAm7gLeGZTP0TM-wX

1. Import Packages and Data File
"""

# Import Packages
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os

# Import Data File
from google.colab import files
uploaded = files.upload()

df = pd.read_csv('cookie_cats.csv')

df.head()

"""2. Data Exploration"""

# Count number of unique user
df.userid.nunique()

# Check Missing Value
df.info()

# Count number of players for each version
df.groupby('version')['userid'].count()

# Count Gamerounds for each version
df.groupby('version')['sum_gamerounds'].agg(["count","mean","median","std","max"])

# Check Outliner
df['sum_gamerounds'].plot.box(figsize=(5,10))

# Check distribution of sum_gamerounds column
df['sum_gamerounds'].describe()

# Count the number of players for each number of gamerounds
plot_df = df.groupby('sum_gamerounds')['userid'].count()
plot_df

# Commented out IPython magic to ensure Python compatibility.
# Plot the distribution of players that played 0 to 100 game rounds
# %matplotlib inline

ax = plot_df[:100].plot(figsize=(10,6))
ax.set_title("The number of players that played 0-100 game rounds during the first week")
ax.set_ylabel("Number of Players")
ax.set_xlabel('# Game rounds')

"""Summary
1. The dataset is composed by data from 90,189 players.
2. No missing value is found in this dataset.
3. The number of players is roughly the same in control group (gate_30) and test group (gate_40).
4. Outliners is being observed from the dataset, where 1 player has an exceptionally high gamerounds of 49,854 while 75% of players layed fewer than 51 rounds.
5. More than half of the players played less than 16 rounds.
5. 3,994 players did not play a single round during the first week.
6. Distribution of the number of players vs gamerounds is highly skewed, with a long tail on the right.

3.1 1-Day Retention
"""

# Calculate Overall 1-day retention
df['retention_1'].sum() / df['retention_1'].count()

# Calculate Retention by each version
df.groupby('version')['retention_1'].mean()

# Create a list with bootstrapped means for each version
boot_1d = []
for i in range(1000):
    boot_mean = df.sample(frac = 1,replace = True).groupby('version')['retention_1'].mean()
    boot_1d.append(boot_mean)

# Transform the list to a DataFrame
boot_1d = pd.DataFrame(boot_1d)

# Plot the bootstrap distributions
boot_1d.plot(kind='density')

# Add a column with the % difference between the two versions
boot_1d['diff'] = (boot_1d.gate_30 - boot_1d.gate_40)/boot_1d.gate_40*100

# Plot the bootstrap % difference
ax = boot_1d['diff'].plot(kind='density')
ax.set_title('% difference in 1-day retention between the versions')

# Calculate the probability that 1-day retention is greater when the gate is at level 30
(boot_1d['diff'] > 0).mean()

"""Summmary
1. 44.5% of players returned and plays the game ONE DAY after they have installed it.
2. Slight decrease of players observed when the gate is at 40.
3. The % difference is around 1%-2%.
4. The probability that 1-day retention is greater when the gate is at level 30 (Control Group) is 96.6%.

3.2.7-Day Retention
"""

# Calculate Overall 7-day retention
df['retention_7'].sum() / df['retention_7'].count()

# Calculate Retention by each version
df.groupby('version')['retention_7'].sum() / df.groupby('version')['retention_7'].count()

# Create a list with bootstrapped means for each versions
boot_7d = []
for i in range(500):
    boot_mean = df.sample(frac=1,replace=True).groupby('version')['retention_7'].mean()
    boot_7d.append(boot_mean)

# Transform the list to a DataFrame
boot_7d = pd.DataFrame(boot_7d)

# Add a column with the % difference between the two versions
boot_7d['diff'] = (boot_7d.gate_30 - boot_7d.gate_40)/boot_7d.gate_40*100

# Plot the bootstrap % difference
ax = boot_7d['diff'].plot(kind='density')
ax.set_title('% difference in 7-day retention between the versions')

# Calculate the probability that 7-day retention is greater when the gate is at level 30
(boot_7d['diff'] > 0).mean()

"""Summmary
1. 18.6% of players returned and plays the game SEVEN DAY after they have installed it.
2. Slight decrease of players observed when the gate is at 40.
3. The % difference is LARGER than that of 1-day retention.
4. The probability that 7-day retention is greater when the gate is at level 30 (Control Group) is 100%..

3.3. Compare 1-Day Retention and 7-day Retention in one plot
"""

# Plot the bootstrap % difference
fig, ax = plt.subplots(1, 1,figsize=(6,5))

boot_1d['diff'].plot.kde(ax=ax, c="#ff99ff", label = "1 day retention")
boot_7d['diff'].plot.kde(ax=ax, c= "#00bfff", label = "7 days retention")

ax.set_xlabel("% difference",size=12)
ax.set_ylabel("% density",size=12)
ax.set_title("Difference in retention between the two A/B groups", fontweight="bold", size=14)
plt.legend()
plt.show()

"""Conculsion

From both 1-day and 7-day Retention results, the gate should be set at level 30 instead of level 40.
"""